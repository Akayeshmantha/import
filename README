# `import` - An Import Mechanism For R

# Motivation
The "default" way to use functionality from a package in R is to load the
entire package with `library` (or `require`). This can have the undesirable
effect of masking objects in the user's search path and can also make it
difficult to identify what functionality comes from which package when using
several `library` statements.

An alternative is to import a single object from a package, say `object <-
package::object`. The downside of this approach is that the object is placed in
the user's global work space, rather than being encapsulated in a namespace
(when using `library` to load `pkg` a namespace `package:pkg` will be attached
in the search path which will contain the exported functions from `pkg`). A
minor point is that one can only import one object at a time using this
approach.

The import package provides a simple alternative to importing and is inspired
in part by Python's `from some_module import some_function` syntax, and will
solve the two issues raised above.

# Installation and usage

To install `import` from GitHub you can use `devtools`:

    devtools::install_github("smbache/import")

The `import` package is named to make usage expressive without having to load
the package using `library`. A basic example, which imports a few functions
from the `dplyr` package is:

    import::from(dplyr, select, arrange, keep_when = filter)

This does pretty much what it says: three functions are imported from `dplyr`,
two of which will keep their original name, and one which is renamed, say to
avoid name clash with `stats::filter`. The imported objects are placed in the
dedault namespace "imports". It is therefore also easy to get rid of them again
with `detach("imports")`. One can specify which namespace to use:

    import::from(magrittr, "%>%", "%$%", ns. = "operators")
    import::from(dplyr, arrange, ns. = "datatools")

If using namespaces, one might prefer the alternative syntax (which does the
same but reverses the argument order):

    import::into("operators", "%>%", "%$%", from = magrittr)
    import::into("datatools", arrange, from = dplyr)

In the examples above most arguments are provided unquoted. A more unambiguous
alternative is to quote the imputs, e.g.

    import::from("ggplot2", "qplot")

When the arguments are unquoted they will be treated as they are written!

