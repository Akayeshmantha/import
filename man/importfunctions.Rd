% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/import.R
\name{from}
\alias{from}
\alias{into}
\title{Import objects from a package.}
\usage{
from(.from, ..., .into = "imports")

into(.into, ..., .from)
}
\arguments{
\item{.from}{the package from which to import.}

\item{...}{names or name-value pairs specifying objects to import.
If arguments are named, then the imported object will have this new name.}

\item{.into}{The name of the search path entry.}
}
\description{
The \code{import::from} and \code{import::into} functions provide
an alternative way to import objects (e.g. functions) from packages.
It is sometimes preferable compared with \code{library} or \code{require}
which will expose all exported objects from the package.
The benefit over \code{obj <- pkg::obj} is that the imports will be
imported into a namespace rather than into the global environment. Also,
it is a more succinct way of importing several objects.
}
\details{
These functions have the intended side-effect of altering
the search path, as they (by default) imports objects into the "imports"
search path entry rather than the global environment.

The \code{import} package is not meant to be loaded with \code{library},
but rather it is named to make the function calls expressive without the
need to preload, i.e. it is designed to be used explicitely with the `::`
syntax: \code{import::from(pkg, x, y)}.
}

